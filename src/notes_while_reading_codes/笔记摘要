ORB-SLAM 和 Kintinuous 都使用 DBoW2 作为回环检测算法,ORB-SLAM 中用的是 ORB 特征描述子用 DBoW2 做回环.DBoW2算法的大致思路为1、bag of words字典建立 2、在线更新字典树 3、归一化。。。。

argc是主程序参数的个数，也就是传入参数的个数，这个值一开始不固定，是看自己输入了多少参数而定的；
argv数组存放的是传入的参数，从0开始，第一个值存放的是可执行文件名，然后依次存放后面传入的参数。

变量命名时，常以小写字母m开头来标志这在类中是个protected类型，b代表bool类型。

list类型的变量有一个函数pushback（）可以把元素加在list的最后面

我们注意到TRACKING线程，很清楚明白的告诉了我们是如何跟踪的，第一，提取ORB特征；第二，进行地图初始化（如果没初始化的话）。
第三，初始位置估计（这里用3种模型，代码在这里经过了很多判断来选择这三种模型的其中一种）得到是一个很粗略的初始位姿；
第四，跟踪局部地图：为了优化上一步得到的初始位姿态。第五，决定是不是插入关键帧。

跟踪的三种模型：
1.TrackWithMotionModel() 
这个就是论文里面提到的恒速运动模型(const velocity motion),意识相当于是：
我们根据上一帧的跟踪结果得到一个运动的速度，我们能够像我们知道的恒速运动那样用类似”速度乘以时间“这一公式来估算当前帧的位姿。
2.TrackReferenceKeyFrame()
这个很好理解，就是根据两帧之间的约束关系来求解位估算位姿。
3. Relocalization()
当我们跟丢了的时候（我用RGBD相机测试代码的时候只要稍微运动快一点就会跟丢.....），
我们用所谓的“重定位”来找回当前帧的位姿，重定位其实跟找闭环相似，都是在database里面找到与当前帧最相似的那一帧。

参考关键帧指的是与当前帧共视点最多的一个关键帧which shares most map points with current frame

相比于localMapping,tracking线程只是判断当前帧是否需要加入关键帧，并没有真的加入地图，
因为tracking线程的主要功能是局部定位，而处理地图中的关键帧，地图点，包括如何加入，如何删除的工作是在LocalMapping线程中完成的

插入MapPoints有三个地方
1、Tracking的初始化时候插入MapPoints
2、Tracking生成关键帧的时候为双目和RGBD生成一些MapPoints
3、Localmapping通过帧间关系进行三角化或者是反投影得到新的MapPoints

LoopClosing.cc 204行左右有个地方可能有BUG，i和iG